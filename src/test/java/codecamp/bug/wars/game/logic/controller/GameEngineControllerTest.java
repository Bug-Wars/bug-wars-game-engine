package codecamp.bug.wars.game.logic.controller;

import codecamp.bug.wars.game.logic.exceptions.InvalidInputException;
import codecamp.bug.wars.game.logic.models.*;
import codecamp.bug.wars.game.logic.service.GameEngineService;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;

import java.util.ArrayList;
import java.util.List;

import static org.junit.jupiter.api.Assertions.*;

class GameEngineControllerTest {

    private GameEngineService mockGameEngineService;
    private GameEngineController gameEngineController;

    @BeforeEach
    public void setup() {
        mockGameEngineService = Mockito.mock(GameEngineService.class);

        gameEngineController = new GameEngineController(mockGameEngineService);
    }

    @Test
    public void createGame_shouldReturn400IfGameRejectedByService(){

        Game input = new Game(null, null, null, null);

        ResponseEntity<GameResult> expected = new ResponseEntity(new GameResult(), HttpStatus.BAD_REQUEST);

        Mockito.when(mockGameEngineService.saveGame(Mockito.any()))
                .thenThrow(new InvalidInputException("Invalid Game"));

        ResponseEntity<GameResult> response = gameEngineController.createGame(input);

        assertEquals(expected, response);
        assertEquals(HttpStatus.BAD_REQUEST, response.getStatusCode());
    }




    @Test
    public void createGame_shouldReturnGameResultAndOkHttpStatus() {
        // arrange
//        Game postGameInput = new Game(null, new Bug(1, "23 0 1 3 5 0 3 2 4 21 3 4 5 1 2 3 8", 300, null));
        MapSpace [][] rows = [
        ["OPEN", "OPEN", "OPEN", "OPEN", "OPEN"],
        ["OPEN", "WALL", "OPEN", "WALL", "OPEN"],
        ["OPEN", "OPEN", "OPEN", "OPEN", "OPEN"],
        ["OPEN", "WALL", "OPEN", "WALL", "OPEN"],
        ["OPEN", "OPEN", "OPEN", "OPEN", "OPEN"]
    ];

        List<Spawn> spawns = new ArrayList<>();
        spawns.add(new Spawn(1, 0, 0));


        Game map = new Map( rows , spawns, food);

        Game postGameInput = new Game(




                /*"map": {
            "rows": [
        ["OPEN", "OPEN", "OPEN", "OPEN", "OPEN"],
        ["OPEN", "WALL", "OPEN", "WALL", "OPEN"],
        ["OPEN", "OPEN", "OPEN", "OPEN", "OPEN"],
        ["OPEN", "WALL", "OPEN", "WALL", "OPEN"],
        ["OPEN", "OPEN", "OPEN", "OPEN", "OPEN"]
    ],
            "spawns": [ { "team": 1, "x":0, "y":0}, {"team": 2, "x":4, "y":4}],
            "food": { "x":"2", "y":"2"}
        },
        "bugs": [
        {
            "team": 1,
                "code": "23 0 1 3 5 0 3 2 4 21 3 4 5 1 2 3 8"
        },
        {
            "team": 2,
                "code": "20 4 5 2 3 5 5 2 1 3 5 21 4 5 2 4"
        }
        "ticks": 300,
                "seed": "<generated by backend, but not revealed to ui>"
    ]
}*/
        );



}